

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.breadmoirai:github-release:2.2.11"
    }
}

plugins {
  id "org.sonarqube" version "2.6.1"
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.github.breadmoirai.github-release"

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '0.1.0'
def libName = "geojson2osm"

repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
}

ext {
    github_token = System.getenv('GITHUB_TOKEN')
    mainSource = file('src/main/java/')
    testSource = file('src/test/java/')
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    compile 'commons-cli:commons-cli:1.4'
    compile 'org.apache.commons:commons-text:1.4'
    compile 'org.jetbrains:annotations:15.0'
    compile "com.mapbox.mapboxsdk:mapbox-sdk-geojson:5.8.0"
    implementation "com.google.code.gson:gson:2.8.9"
    compile 'net.sf.kxml:kxml2:2.3.0'

    // Use JUnit test framework
    testCompile "junit:junit:4.12"
}

task convertTest(type: JavaExec) {
    main = "ch.poole.osm.geojson2osm.Convert"
    classpath = sourceSets.main.runtimeClasspath
    args('-i', 'src/test/resources/5192_all.geojson','-o','build/tmp/5192_all.xml')
}
convertTest.group = 'validation'
convertTest.description = 'test output'


def loadProperties = { filename -> 
    def properties = new Properties()
    file(filename).withInputStream {
        properties.load(it)
    }
    return properties
}

task sourcesJar(type: Jar) {
	from mainSource, testSource
	classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
//	options.encoding = 'UTF-8'
}

task replaceVersion {
    inputs.file('build.gradle')
    ant.replaceregexp(match:'([0-9]+\\.[0-9]+\\.[0-9]+)', replace:"${version}", flags:'g', byline:true) {
        fileset(dir: '.', includes: 'README.md')
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar, dependsOn: build) {
    manifest {
        attributes 'Implementation-Title': 'geojson2osm fat jar',
        'Implementation-Version': "${project.version}"
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
fatJar.group = 'build'

sonarqube {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/main/"
        property "sonar.jacoco.reportPaths","build/jacoco/test.exec"
    }
}

ext {
    repoUrl = 'https://github.com/simonpoole/geojson2osm.git'
    spdxId = 'Apache-2.0'
}

publishing {
    publications {
        Release(MavenPublication) {
            from components.java
            groupId 'ch.poole.osm'
            artifactId 'geojson2osm'
			artifact sourcesJar
			artifact javadocJar
			
			pom {
                name = artifactId
                description = 'Assorted utils for JOSM style presets'    
                url = 'https://github.com/simonpoole/geojson2osm'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://raw.githubusercontent.com/simonpoole/geojson2osms/master/LICENCE'
                    }
                }
                developers {
                    developer {
                        'Simon Poole'
                    }
                }
                repositories {
                    maven {
                        name = 'sonatype'
                        credentials {
                            username System.getenv('SONATYPE_USER')
                            password System.getenv('SONATYPE_PASSWORD')
                        }
                        def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                        def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.Release
}

githubRelease {
    token "${github_token}"
    owner "simonpoole"
    tagName "${version}"
    releaseName "${version}"
    body ""
    FilenameFilter filter = { dir, filename -> filename.contains(version) }
    releaseAssets = jar.destinationDir.listFiles filter
    overwrite true
}

build {
    dependsOn "replaceVersion"
}
